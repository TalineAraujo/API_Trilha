  // const validarCPF = (cpf) => {
        //     if (!Number.isInteger(cpf))
        //         return false;
        //     if (cpf.length !== 11 || !!cpf.match(/(\d)\1{10}/)) 
        //         return false;


        // 'use strict';
 
// const Usuario = require('../../models/Usuario');

// /** @type {import('sequelize-cli').Migration} */
// module.exports = {
//   async up (queryInterface, Sequelize) {
//     await queryInterface.createTable('locais',{

//       id: {
//         type: Sequelize.INTEGER,
//         allowNull: false,
//         autoIncrement: true,
//         primaryKey: true
//       },

//       nome: {
//         type: Sequelize.STRING,
//         allowNull: false
//       },

//     descricao:{
//         type: Sequelize.TEXT
//     },

//     latitude:{
//         type: Sequelize.FLOAT
//     },

//     longitude:{
//         type: Sequelize.FLOAT
//     },

//     usuarioId: {
//         type: Sequelize.INTEGER,
//         allowNull: false,
//         references: {
//             model: Usuario, 
//             key: 'id' 
//         }
//     },

//     createdAt: {
//       type: Sequelize.DATE,
//       allowNull: false
//     },

//     updatedAt: {
//       type: Sequelize.DATE,
//       allowNull: false
//     }
//   })
    
//   },

//   async down (queryInterface, Sequelize) {
//     await queryInterface.dropTable('locais');
//   }
// };



      

// localRoutes.get('/:local_id', auth, async(req, res) =>{
//   try{

//       console.log("Iniciando busca por informações do local...");

//       const local = await Local.findOne({where:{id: req.params.local_id, usuarioId: req.user.id}});
//       if(!local){


//           console.log("Local não encontrado ou permissão negada.");


//           return res.status(404).json({message: 'Local não encontrado ou acesso não permitido'})
//       }
//       const googleMapsLink = `https://www.google.com/maps?q=${local.latitude},${local.longitude}`;

//       // Adiciona o link do Google Maps às informações detalhadas do local
//       const localComLinkMaps = {
//           ...local.toJSON(),
//           googleMapsLink
//       };
//     console.log("Informações do local encontradas com sucesso.");
//       res.status(200).json(localComLinkMaps);

//   }catch(error){
//       console.error(error);
//       return res.status(500).json({error: 'Não foi possivel obter as informações do usuário'})
//   }
// })
// localRoutes.delete('/:local_id', auth, async (req, res) =>{
//   try{

//       console.log("Iniciando exclusão do local...");

//       const local = await Local.findOne({ where: { id: req.params.local_id, usuarioId: req.user.id } });

//       if (!local){
//           console.log("Local não encontrado ou permissão negada.");
//           return res.status(404).json({message:'Local não encontrado ou acesso negado'})
//       }
//       await local.destroy();
//       console.log("Local excluído com sucesso.");

//       res.status(200).json({ message: 'Local excluído com sucesso.' });

//   }catch(error){
//       console.error("Erro ao excluir o local:", error);
//       return res.status(500).json({message: 'Não foi possivel excluir o local'});
//   }

// });
// localRoutes.put('/:local_id', auth, async (req, res) => {
//   try {
//       console.log("Iniciando atualização do local...");

//       const { nome, descricao, cep, usuarioId } = req.body;

      
//       if (!nome || !cep) {
//           return res.status(400).json({ message: 'Nome e endereço são obrigatórios!' });
//       }

     
//       const local = await Local.findOne({ where: { id: req.params.local_id, usuarioId: req.user.id } });
//       if (!local) {
//           console.log("Local não encontrado ou permissão negada.");
//           return res.status(404).json({ message: 'Local não encontrado ou você não tem permissão para alterar este local.' });
//       }

      
//       local.nome = nome;
//       local.descricao = descricao;

//       await local.save();

//       console.log("Local atualizado com sucesso.");
//       res.status(200).json(local);
//   } catch (error) {
//       console.error("Erro ao atualizar o local:", error);
//       return res.status(500).json({ error: 'Não foi possível atualizar as informações do local.' });
//   }
// });


/*
         #swagger.tags = ['Usuario']
         #swagger.parameters['parametersName'] ={
            in: 'query',
            description:'Buscar UsuarioID' 
    }
    */ 

  //    // Função para configurar o Swagger
  // setupSwagger(app) {
  //   swaggerSetup(app);
  // }